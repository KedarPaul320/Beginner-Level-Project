# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Calculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(449, 394)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(10, 30, 431, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 120, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(120, 120, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(230, 120, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_divide = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_divide.setGeometry(QtCore.QRect(340, 120, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_divide.setFont(font)
        self.pushButton_divide.setObjectName("pushButton_divide")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(230, 180, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(120, 180, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 180, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_multiply = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_multiply.setGeometry(QtCore.QRect(340, 180, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_multiply.setFont(font)
        self.pushButton_multiply.setObjectName("pushButton_multiply")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(230, 240, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(120, 240, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 240, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_minus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_minus.setGeometry(QtCore.QRect(340, 240, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_minus.setFont(font)
        self.pushButton_minus.setObjectName("pushButton_minus")
        self.pushButton_equal = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_equal.setGeometry(QtCore.QRect(230, 300, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_equal.setFont(font)
        self.pushButton_equal.setObjectName("pushButton_equal")
        self.pushButton_dot = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_dot.setGeometry(QtCore.QRect(120, 300, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_dot.setFont(font)
        self.pushButton_dot.setObjectName("pushButton_dot")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 300, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_plus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_plus.setGeometry(QtCore.QRect(340, 300, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.pushButton_plus.setFont(font)
        self.pushButton_plus.setObjectName("pushButton_plus")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 449, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.pushButton_7.setText(_translate("MainWindow", "7"))
        self.pushButton_8.setText(_translate("MainWindow", "8"))
        self.pushButton_9.setText(_translate("MainWindow", "9"))
        self.pushButton_divide.setText(_translate("MainWindow", "/"))
        self.pushButton_6.setText(_translate("MainWindow", "6"))
        self.pushButton_5.setText(_translate("MainWindow", "5"))
        self.pushButton_4.setText(_translate("MainWindow", "4"))
        self.pushButton_multiply.setText(_translate("MainWindow", "*"))
        self.pushButton_1.setText(_translate("MainWindow", "1"))
        self.pushButton_2.setText(_translate("MainWindow", "2"))
        self.pushButton_3.setText(_translate("MainWindow", "3"))
        self.pushButton_minus.setText(_translate("MainWindow", "-"))
        self.pushButton_equal.setText(_translate("MainWindow", "="))
        self.pushButton_dot.setText(_translate("MainWindow", "."))
        self.pushButton.setText(_translate("MainWindow", "0"))
        self.pushButton_plus.setText(_translate("MainWindow", "+"))


class CalculatorWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        
        # Calculator state variables
        self.current_number = ""
        self.first_number = 0
        self.operation = ""
        self.new_number = True
        
        # Connect button signals to slots
        self.connect_buttons()
        
        # Initialize display
        self.ui.textEdit.setText("0")
        
    def connect_buttons(self):
        """Connect all calculator buttons to their respective functions"""
        # Number buttons
        self.ui.pushButton.clicked.connect(lambda: self.number_clicked("0"))
        self.ui.pushButton_1.clicked.connect(lambda: self.number_clicked("1"))
        self.ui.pushButton_2.clicked.connect(lambda: self.number_clicked("2"))
        self.ui.pushButton_3.clicked.connect(lambda: self.number_clicked("3"))
        self.ui.pushButton_4.clicked.connect(lambda: self.number_clicked("4"))
        self.ui.pushButton_5.clicked.connect(lambda: self.number_clicked("5"))
        self.ui.pushButton_6.clicked.connect(lambda: self.number_clicked("6"))
        self.ui.pushButton_7.clicked.connect(lambda: self.number_clicked("7"))
        self.ui.pushButton_8.clicked.connect(lambda: self.number_clicked("8"))
        self.ui.pushButton_9.clicked.connect(lambda: self.number_clicked("9"))
        
        # Operation buttons
        self.ui.pushButton_plus.clicked.connect(lambda: self.operation_clicked("+"))
        self.ui.pushButton_minus.clicked.connect(lambda: self.operation_clicked("-"))
        self.ui.pushButton_multiply.clicked.connect(lambda: self.operation_clicked("*"))
        self.ui.pushButton_divide.clicked.connect(lambda: self.operation_clicked("/"))
        
        # Other buttons
        self.ui.pushButton_dot.clicked.connect(self.dot_clicked)
        self.ui.pushButton_equal.clicked.connect(self.equal_clicked)
        
        # Add clear functionality - double click on display to clear
        self.ui.textEdit.mouseDoubleClickEvent = lambda e: self.clear_calculator()
        
    def clear_calculator(self):
        """Clear the calculator display and reset state"""
        self.current_number = ""
        self.first_number = 0
        self.operation = ""
        self.new_number = True
        self.ui.textEdit.setText("0")
        
    def number_clicked(self, number):
        """Handle number button clicks"""
        if self.new_number:
            self.current_number = number
            self.new_number = False
        else:
            self.current_number += number
        
        self.update_display()
        
    def update_display(self):
        """Update the display to show the complete expression"""
        if self.operation and self.current_number:
            # Show: first_number operation current_number (only when second number is being typed)
            display_text = f"{self.first_number} {self.operation} {self.current_number}"
        elif self.operation and not self.current_number:
            # Show only the operation when waiting for second number
            display_text = f"{self.first_number} {self.operation}"
        else:
            # Show only the current number
            display_text = self.current_number if self.current_number else "0"
        
        self.ui.textEdit.setText(display_text)
        
    def operation_clicked(self, op):
        """Handle operation button clicks"""
        if self.current_number:
            if self.operation and not self.new_number:
                # Calculate previous operation first
                self.calculate()
            
            self.first_number = int(self.current_number)
            self.operation = op
            self.new_number = True
            # Show first number and operation, waiting for second number
            self.ui.textEdit.setText(f"{self.first_number} {self.operation}")
            
    def dot_clicked(self):
        """Handle decimal point clicks"""
        if "." not in self.current_number:
            if self.new_number:
                self.current_number = "0."
                self.new_number = False
            else:
                self.current_number += "."
            self.update_display()
            
    def equal_clicked(self):
        """Handle equals button clicks"""
        if self.current_number and self.operation:
            self.calculate()
            self.operation = ""
            
    def calculate(self):
        """Perform the calculation"""
        if not self.current_number or not self.operation:
            return
            
        second_number = float(self.current_number)
        result = 0
        
        try:
            if self.operation == "+":
                result = self.first_number + second_number
            elif self.operation == "-":
                result = self.first_number - second_number
            elif self.operation == "*":
                result = self.first_number * second_number
            elif self.operation == "/":
                if second_number == 0:
                    self.ui.textEdit.setText("Error: Division by zero")
                    return
                result = self.first_number / second_number
                
            # Display result
            if result.is_integer():
                result = int(result)
            
            # Update state
            self.current_number = str(result)
            self.first_number = result
            self.new_number = True
            
            # Show the result
            self.ui.textEdit.setText(str(result))
            
        except Exception as e:
            self.ui.textEdit.setText("Error")
            self.new_number = True


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = CalculatorWindow()
    window.show()
    sys.exit(app.exec_())
